#!/bin/bash
# Enhanced Btrfs Snapshot Script v2.0
# Safety-first approach with extensive error checking and logging

set -euo pipefail

# Configuration
SNAPSHOT_DIR="/.snapshots"
METADATA_DIR="/.snapshots/.metadata"
DATE=$(date +%Y%m%d-%H%M%S)
LOGFILE="/var/log/btrfs-snapshots.log"
SCRIPT_NAME="$(basename "$0")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function with levels
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    echo "[$timestamp] [$level] $message" >> "$LOGFILE"
    
    case "$level" in
        "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO")    echo -e "${BLUE}ℹ️  $message${NC}" ;;
        *)         echo "$message" ;;
    esac
}

# Help function
show_help() {
    cat << EOF
${BLUE}Enhanced Btrfs Snapshot Script v2.0${NC}

${YELLOW}Usage:${NC} $0 [OPTIONS] [TYPE]

${YELLOW}Types:${NC}
  timeline        Automatic timeline snapshot (default)
  manual          Manual snapshot with optional comment
  pre-package     Before package installation/removal
  boot            Before system reboot/update
  pre-update      Before system updates

${YELLOW}Options:${NC}
  -c, --comment "text"    Add comment to snapshot
  -n, --name "name"       Custom name for snapshot
  -d, --dry-run          Show what would be done (test mode)
  -v, --verbose          Verbose output
  -h, --help             Show this help

${YELLOW}Examples:${NC}
  $0 manual -c "Before testing new kernel"
  $0 manual -n "working-desktop-setup"
  $0 pre-package -c "Before installing AUR package"
  $0 --dry-run timeline
  $0 boot -v

${YELLOW}Retention Policy:${NC}
  Root snapshots:  10 hourly, 10 daily, 10 weekly, 10 monthly
  Home snapshots:  20 hourly, 15 daily, 8 weekly, 6 monthly
EOF
}

# Pre-flight checks
preflight_checks() {
    log "INFO" "Starting preflight checks..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "This script must be run as root"
        return 1
    fi
    
    # Check if btrfs is available
    if ! command -v btrfs &> /dev/null; then
        log "ERROR" "btrfs command not found"
        return 1
    fi
    
    # Check if snapshot directory exists
    if [[ ! -d "$SNAPSHOT_DIR" ]]; then
        log "ERROR" "Snapshot directory $SNAPSHOT_DIR does not exist"
        return 1
    fi
    
    # Create metadata directory if it doesn't exist
    if [[ ! -d "$METADATA_DIR" ]]; then
        mkdir -p "$METADATA_DIR"
        log "INFO" "Created metadata directory: $METADATA_DIR"
    fi
    
    # Check if root is btrfs
    if ! btrfs filesystem show / &> /dev/null; then
        log "ERROR" "Root filesystem is not btrfs"
        return 1
    fi
    
    # Check if home is btrfs
    if ! btrfs filesystem show /home &> /dev/null; then
        log "ERROR" "Home filesystem is not btrfs"
        return 1
    fi
    
    # Check available space
    local available=$(df "$SNAPSHOT_DIR" | awk 'NR==2 {print $4}')
    if [[ $available -lt 1048576 ]]; then  # Less than 1GB
        log "WARNING" "Low disk space: ${available}KB available"
    fi
    
    log "SUCCESS" "All preflight checks passed"
    return 0
}

# Create snapshot with metadata
create_snapshot() {
    local subvol="$1"
    local snapshot_name="$2"
    local comment="${3:-}"
    local snapshot_path="$SNAPSHOT_DIR/$snapshot_name"
    
    log "INFO" "Creating snapshot: $snapshot_name from $subvol"
    
    # Check if snapshot already exists
    if [[ -d "$snapshot_path" ]]; then
        log "ERROR" "Snapshot already exists: $snapshot_name"
        return 1
    fi
    
    # Create the snapshot
    if btrfs subvolume snapshot -r "$subvol" "$snapshot_path" &> /dev/null; then
        # Add metadata to separate writable directory
        local metadata_file="$METADATA_DIR/$snapshot_name.info"
        {
            echo "snapshot_name=$snapshot_name"
            echo "snapshot_date=$(date '+%Y-%m-%d %H:%M:%S')"
            echo "snapshot_user=$USER"
            echo "snapshot_source=$subvol"
            echo "snapshot_script=$SCRIPT_NAME"
            [[ -n "$comment" ]] && echo "snapshot_comment=$comment"
        } > "$metadata_file"
        
        if [[ -n "$comment" ]]; then
            log "SUCCESS" "Snapshot created with comment: $comment"
        else
            log "SUCCESS" "Snapshot created: $snapshot_name"
        fi
        return 0
    else
        log "ERROR" "Failed to create snapshot: $snapshot_name"
        return 1
    fi
}

# Main snapshot creation logic
create_snapshots() {
    local type="$1"
    local comment="${2:-}"
    local custom_name="${3:-}"
    local dry_run="${4:-false}"
    
    local root_name home_name
    
    # Generate snapshot names
    if [[ -n "$custom_name" ]]; then
        root_name="$custom_name-root-$DATE"
        home_name="$custom_name-home-$DATE"
    else
        case "$type" in
            "timeline")     root_name="root-$DATE"
                           home_name="home-$DATE" ;;
            "manual")       root_name="manual-$DATE"
                           home_name="home-manual-$DATE" ;;
            "pre-package")  root_name="pre-pkg-$DATE"
                           home_name="home-pre-pkg-$DATE" ;;
            "boot")         root_name="boot-$DATE"
                           home_name="home-boot-$DATE" ;;
            "pre-update")   root_name="pre-update-$DATE"
                           home_name="home-pre-update-$DATE" ;;
            *)              root_name="$type-$DATE"
                           home_name="home-$type-$DATE" ;;
        esac
    fi
    
    log "INFO" "Starting $type snapshot creation..."
    
    if [[ "$dry_run" == "true" ]]; then
        log "INFO" "DRY RUN MODE - No changes will be made"
        echo "Would create:"
        echo "  Root snapshot: $SNAPSHOT_DIR/$root_name"
        echo "  Home snapshot: $SNAPSHOT_DIR/$home_name"
        [[ -n "$comment" ]] && echo "  Comment: $comment"
        return 0
    fi
    
    # Create root snapshot
    if create_snapshot "/" "$root_name" "$comment"; then
        echo "Root snapshot: $root_name"
    else
        log "ERROR" "Failed to create root snapshot"
        return 1
    fi
    
    # Create home snapshot
    if create_snapshot "/home" "$home_name" "$comment"; then
        echo "Home snapshot: $home_name"
    else
        log "ERROR" "Failed to create home snapshot - cleaning up root snapshot"
        btrfs subvolume delete "$SNAPSHOT_DIR/$root_name" &> /dev/null || true
        return 1
    fi
    
    log "SUCCESS" "Snapshot creation completed successfully"
    return 0
}

# Parse command line arguments
parse_arguments() {
    COMMENT=""
    CUSTOM_NAME=""
    TYPE="timeline"
    DRY_RUN="false"
    VERBOSE="false"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c|--comment)
                COMMENT="$2"
                shift 2
                ;;
            -n|--name)
                CUSTOM_NAME="$2"
                shift 2
                ;;
            -d|--dry-run)
                DRY_RUN="true"
                shift
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            timeline|manual|pre-package|boot|pre-update)
                TYPE="$1"
                shift
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Main execution
main() {
    # Initialize logging
    mkdir -p "$(dirname "$LOGFILE")"
    log "INFO" "=== Enhanced Btrfs Snapshot Script Started ==="
    log "INFO" "Command: $0 $*"
    
    # Parse arguments
    parse_arguments "$@"
    
    # Show configuration in verbose mode
    if [[ "$VERBOSE" == "true" ]]; then
        log "INFO" "Configuration:"
        log "INFO" "  Type: $TYPE"
        log "INFO" "  Comment: $COMMENT"
        log "INFO" "  Custom name: $CUSTOM_NAME"
        log "INFO" "  Dry run: $DRY_RUN"
        log "INFO" "  Snapshot dir: $SNAPSHOT_DIR"
    fi
    
    # Run preflight checks
    if ! preflight_checks; then
        log "ERROR" "Preflight checks failed"
        exit 1
    fi
    
    # Create snapshots
    if create_snapshots "$TYPE" "$COMMENT" "$CUSTOM_NAME" "$DRY_RUN"; then
        log "SUCCESS" "Script completed successfully"
        exit 0
    else
        log "ERROR" "Script failed"
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"
