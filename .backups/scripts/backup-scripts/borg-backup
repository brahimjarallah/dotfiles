#!/bin/bash
# Arch Linux Btrfs Borg Backup Script
# Safe backup using Btrfs snapshots approach
# Manual execution only

set -euo pipefail

# --------------- CONFIGURATION ---------------
REPO="/mnt/backup/borg-repo"
SNAPSHOT_DIR="/mnt/snapshots-backup"
LOG_FILE="/var/log/borg-backup.log"
HOSTNAME=$(hostname)
BACKUP_NAME="${HOSTNAME}-$(date +%Y-%m-%d-%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --------------- LOGGING FUNCTION ---------------
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO") echo -e "${BLUE}[INFO]${NC} $message" | tee -a "$LOG_FILE" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" | tee -a "$LOG_FILE" ;;
        "WARNING") echo -e "${YELLOW}[WARNING]${NC} $message" | tee -a "$LOG_FILE" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" | tee -a "$LOG_FILE" ;;
    esac
    echo "$timestamp - [$level] $message" >> "$LOG_FILE"
}

# --------------- CLEANUP FUNCTION ---------------
cleanup() {
    log "INFO" "Cleaning up temporary snapshots..."
    
    if [ -d "$SNAPSHOT_DIR/root-snapshot" ]; then
        sudo btrfs subvolume delete "$SNAPSHOT_DIR/root-snapshot" 2>/dev/null || true
    fi
    
    if [ -d "$SNAPSHOT_DIR/home-snapshot" ]; then
        sudo btrfs subvolume delete "$SNAPSHOT_DIR/home-snapshot" 2>/dev/null || true
    fi
    
    if [ -d "$SNAPSHOT_DIR" ] && [ -z "$(ls -A $SNAPSHOT_DIR 2>/dev/null)" ]; then
        sudo rmdir "$SNAPSHOT_DIR" 2>/dev/null || true
    fi
    
    # Clean up temporary files
    rm -f /tmp/pkglist.txt /tmp/aur.txt 2>/dev/null || true
}

# Set trap to cleanup on exit
trap cleanup EXIT

# --------------- SAFETY CHECKS ---------------
log "INFO" "Starting Borg backup: $BACKUP_NAME"

# Check if running as root (we need sudo for snapshots)
if [[ $EUID -eq 0 ]]; then
    log "ERROR" "Don't run this script as root directly. Use sudo when needed."
    exit 1
fi

# Check if backup drive is mounted
if ! mountpoint -q /mnt/backup; then
    log "ERROR" "Backup drive not mounted at /mnt/backup"
    exit 1
fi

# Check if repository exists
if [ ! -d "$REPO" ]; then
    log "ERROR" "Borg repository not found at $REPO"
    log "INFO" "Run: borg init --encryption=none $REPO"
    exit 1
fi

# Check available space (rough estimate)
AVAILABLE_SPACE=$(df /mnt/backup | awk 'NR==2 {print $4}')
if [ "$AVAILABLE_SPACE" -lt 10485760 ]; then # Less than 10GB
    log "WARNING" "Low disk space on backup drive (less than 10GB available)"
fi

# --------------- CREATE PACKAGE LISTS ---------------
log "INFO" "Creating package lists for system reconstruction..."

pacman -Qqen > /tmp/pkglist.txt 2>/dev/null || {
    log "ERROR" "Failed to create package list"
    exit 1
}

pacman -Qqem > /tmp/aur.txt 2>/dev/null || {
    log "WARNING" "Failed to create AUR package list (continuing anyway)"
    touch /tmp/aur.txt
}

log "SUCCESS" "Package lists created successfully"

# --------------- CREATE BTRFS SNAPSHOTS ---------------
log "INFO" "Creating Btrfs snapshots for consistent backup..."

# Create snapshot directory
sudo mkdir -p "$SNAPSHOT_DIR"

# Create root snapshot
if ! sudo btrfs subvolume snapshot -r / "$SNAPSHOT_DIR/root-snapshot"; then
    log "ERROR" "Failed to create root snapshot"
    exit 1
fi

# Create home snapshot  
if ! sudo btrfs subvolume snapshot -r /home "$SNAPSHOT_DIR/home-snapshot"; then
    log "ERROR" "Failed to create home snapshot"
    exit 1
fi

log "SUCCESS" "Snapshots created successfully"

# --------------- PERFORM BACKUP ---------------
log "INFO" "Starting Borg backup process..."

# Run the backup
borg create \
    --verbose \
    --filter AME \
    --list \
    --stats \
    --show-rc \
    --compression lz4 \
    --exclude-caches \
    --exclude "$SNAPSHOT_DIR/root-snapshot/dev/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/proc/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/sys/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/tmp/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/run/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/mnt/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/media/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/lost+found" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/var/tmp/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/var/cache/pacman/pkg/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/.snapshots/*" \
    --exclude "$SNAPSHOT_DIR/root-snapshot/var/lib/docker/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.cache/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.local/share/Trash/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.mozilla/firefox/*/Cache*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.config/google-chrome/*/Cache*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.config/BraveSoftware/*/Cache*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.config/chromium/*/Cache*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.steam/steam/steamapps/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/Downloads/tmp/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.local/share/virtualenv/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.docker/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/VirtualBox VMs/*" \
    --exclude "$SNAPSHOT_DIR/home-snapshot/*/.vagrant.d/boxes/*" \
    "$REPO::$BACKUP_NAME" \
    "$SNAPSHOT_DIR/root-snapshot" \
    "$SNAPSHOT_DIR/home-snapshot" \
    /boot \
    /tmp/pkglist.txt \
    /tmp/aur.txt

backup_exit=$?

# --------------- CHECK BACKUP RESULT ---------------
if [ $backup_exit -eq 0 ]; then
    log "SUCCESS" "Backup completed successfully: $BACKUP_NAME"
elif [ $backup_exit -eq 1 ]; then
    log "WARNING" "Backup completed with warnings: $BACKUP_NAME"
    log "INFO" "Warning status is normal for system backups (permission issues, etc.)"
else
    log "ERROR" "Backup failed with exit code: $backup_exit"
    exit $backup_exit
fi

# --------------- RETENTION POLICY (PRUNE) ---------------
log "INFO" "Applying retention policy (pruning old backups)..."

borg prune \
    --list \
    --prefix "${HOSTNAME}-" \
    --show-rc \
    --keep-daily 7 \
    --keep-weekly 4 \
    --keep-monthly 6 \
    "$REPO"

prune_exit=$?

if [ $prune_exit -eq 0 ]; then
    log "SUCCESS" "Retention policy applied successfully"
else
    log "ERROR" "Pruning failed with exit code: $prune_exit"
fi

# --------------- FINAL STATUS ---------------
log "INFO" "Backup operation completed"
log "INFO" "Repository location: $REPO"
log "INFO" "Archive name: $BACKUP_NAME"

# Show repository stats
log "INFO" "Repository statistics:"
borg info "$REPO" | tail -n 10

log "SUCCESS" "All operations completed successfully!"

echo
echo -e "${GREEN}=== BACKUP COMPLETED ===${NC}"
echo -e "Archive: ${BLUE}$BACKUP_NAME${NC}"
echo -e "Log file: ${BLUE}$LOG_FILE${NC}"
echo
echo "To list all backups: borg list $REPO"
echo "To mount a backup: borg mount $REPO::$BACKUP_NAME /tmp/restore"
echo
