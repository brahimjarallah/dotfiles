#!/bin/bash
# This script performs a full system backup using BorgBackup
# It includes logging, safety checks, exclusions, and a retention policy

# Safety flags to make script more robust:
# -e: exit immediately if a command fails
# -u: treat unset variables as an error
# -o pipefail: if any command in a pipeline fails, the whole pipeline fails
set -euo pipefail

# --------------- CONFIGURATION SECTION ---------------

# Path to the Borg repository where backups will be stored
REPO="/mnt/backup/borg-repo"

if [ ! -d "$REPO" ]; then
    echo "üìÅ Directory $REPO does not exist. Creating..."
    mkdir -p "$REPO" && echo "‚úÖ Created $REPO successfully."
else
    echo "‚úîÔ∏è Directory $REPO already exists."
fi

# Path to the log file where all backup actions will be recorded
LOG_FILE="/var/log/borg-backup.log"

# Get the current hostname (useful for naming the backup)
HOSTNAME=$(hostname)

# Create a unique backup name using hostname and current date+time
# Example: myhost-2025-07-24-113020
BACKUP_NAME="${HOSTNAME}-$(date +%Y-%m-%d-%H%M%S)"

# --------------- LOGGING FUNCTION ---------------

# Simple logging function that prints a timestamped message to stdout and appends it to the log file
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# --------------- SAFETY CHECKS ---------------

# Check if the mount point for the external backup drive is active
if ! mountpoint -q /mnt/backup; then
    log "‚ùå Backup drive not mounted at /mnt/backup"
    exit 1
fi

# Check if the Borg repository directory exists
if [ ! -d "$REPO" ]; then
    log "‚ùå Borg repository not found at $REPO"
    exit 1
fi

# --------------- BEGIN BACKUP ---------------

log "Starting Borg backup: $BACKUP_NAME"

# Create list of installed packages from official repositories
# `pacman -Qqen`: list of explicitly installed native packages
log "Creating package lists"
pacman -Qqen > /tmp/pkglist.txt

# List of AUR or foreign packages (installed manually)
pacman -Qqem > /tmp/aur.txt

# --------------- RUN BORG BACKUP ---------------

# The `borg create` command does the actual backup.
# Below are the options and what they mean:

borg create \
    --verbose \                        # Print detailed output
    --filter AME \                     # Show Added/Modified/Existing files
    --list \                           # List all files being backed up
    --stats \                          # Show statistics after backup
    --show-rc \                        # Show return code at end
    --compression lz4 \                # Use LZ4 compression (fast, light)
    --exclude-caches \                 # Exclude cache directories with CACHEDIR.TAG
    --exclude '/dev/*' \               # Exclude device files
    --exclude '/proc/*' \              # Exclude virtual proc filesystem
    --exclude '/sys/*' \               # Exclude sysfs
    --exclude '/tmp/*' \               # Exclude temporary files
    --exclude '/run/*' \               # Exclude runtime data
    --exclude '/mnt/*' \               # Avoid backing up other mounted drives
    --exclude '/media/*' \             # Same for media
    --exclude '/lost+found' \          # Don't backup recovered fs data
    --exclude '/var/tmp/*' \           # Temporary system files
    --exclude '/var/cache/pacman/pkg/*' \ # Pacman package cache (can be redownloaded)
    --exclude '/.snapshots/*' \        # Exclude Btrfs snapshots
    --exclude '/home/*/.cache/*' \     # Exclude user cache directories
    --exclude '/home/*/.local/share/Trash/*' \ # Exclude user trash
    --exclude '/home/*/.mozilla/firefox/*/Cache/*' \ # Firefox cache
    --exclude '/home/*/.config/google-chrome/*/Cache/*' \ # Chrome cache
    --exclude '/home/*/.config/BraveSoftware/Brave-Browser/*/Cache/*' \  # Brave cache
    --exclude '/home/*/.steam/steam/steamapps/*' \ # Exclude Steam downloaded games
    \
    "$REPO::$BACKUP_NAME" \            # Destination: repo + archive name
    / \                                # Include root filesystem
    /tmp/pkglist.txt \                 # Also include package list
    /tmp/aur.txt                       # And AUR package list

# Store the exit code of the borg command to handle it later
backup_exit=$?

# --------------- CLEANUP TEMP FILES ---------------

# Remove the temporary package list files we created earlier
rm -f /tmp/pkglist.txt /tmp/aur.txt

# --------------- LOG BACKUP RESULT ---------------

log "Backup finished with exit code: $backup_exit"

# If the backup succeeded
if [ $backup_exit -eq 0 ]; then
    log "‚úÖ Backup completed successfully: $BACKUP_NAME"
else
    # If it failed, log and exit with same code
    log "‚ùå Backup failed with exit code: $backup_exit"
    exit $backup_exit
fi

# --------------- PRUNE OLD BACKUPS (RETENTION POLICY) ---------------

log "Pruning old backups"

# Run `borg prune` to keep only the latest:
# - 7 daily backups
# - 4 weekly backups
# - 6 monthly backups
borg prune \
    --list \                      # Show each archive pruned
    --prefix "${HOSTNAME}-" \    # Only delete backups matching this hostname prefix
    --show-rc \                   # Show return code
    --keep-daily 7 \              # Keep last 7 days
    --keep-weekly 4 \            # Keep last 4 weeks
    --keep-monthly 6 \           # Keep last 6 months
    "$REPO"                      # Target Borg repository

# Store exit status of prune command
prune_exit=$?

# --------------- LOG PRUNE RESULT ---------------

# Log whether prune succeeded or failed
if [ $prune_exit -eq 0 ]; then
    log "‚úÖ Pruning completed successfully"
else
    log "‚ùå Pruning failed with exit code: $prune_exit"
fi

log "Borg backup operation completed"

