#!/bin/bash
# Rsync Backup Script - Creates browsable mirrors of the system and user home directory
# Usage: rsync-backup [system|home|dotfiles|all]

# -e: Exit if any command fails
# -u: Treat unset variables as an error
# -o pipefail: Return non-zero if any command in a pipeline fails
set -euo pipefail

# === Configuration Variables ===

# Root path for all backup data
BACKUP_ROOT="/mnt/backup"

# System mirror directory (entire system except /home and volatile dirs)
SYSTEM_MIRROR="$BACKUP_ROOT/system-mirror"

# Home mirror directory (user’s home folder)
HOME_MIRROR="$BACKUP_ROOT/home-mirror"

# Log file for backup messages
LOG_FILE="/var/log/rsync-backup.log"

# Get the actual logged-in username even in sudo context
USERNAME=$(logname 2>/dev/null || echo $SUDO_USER)

# === Logging Function ===
# Prints message with timestamp and appends it to log file
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# === Backup Drive Check ===
# Ensures that /mnt/backup is mounted before running rsync
check_backup_mount() {
    if ! mountpoint -q /mnt/backup; then
        log "❌ Backup drive not mounted at /mnt/backup"
        exit 1
    fi
}

# === Rsync System Mirror ===
# Backs up system files excluding sensitive, temporary, and irrelevant paths
rsync_system() {
    log "Starting system mirror rsync..."

    rsync -avH --delete --delete-excluded \                     # -a: archive mode, -v: verbose, -H: preserve hardlinks
        --exclude='/dev/*' \                                    # Virtual device files
        --exclude='/proc/*' \                                   # Process info pseudo FS
        --exclude='/sys/*' \                                    # System interface
        --exclude='/tmp/*' \                                    # Temp files
        --exclude='/run/*' \                                    # Runtime files
        --exclude='/mnt/*' \                                    # Mounted volumes (including backup)
        --exclude='/media/*' \                                  # External media
        --exclude='/lost+found' \                               # Recovery info
        --exclude='/var/tmp/*' \                                # Temp cache
        --exclude='/var/cache/pacman/pkg/*' \                   # Pacman cache (large size, rebuildable)
        --exclude='/.snapshots/*' \                             # Btrfs snapshots
        --exclude='/home/*' \                                   # Home is backed up separately
        --exclude='/boot/grub/grubenv' \                        # Boot environment file (not portable)
        --exclude='/var/lib/systemd/random-seed' \              # Random seed file
        --exclude='/var/log/journal/*' \                        # System logs (rotates frequently)
        --exclude='/var/lib/dhcpcd/*' \                         # DHCP leases
        --stats \                                               # Show transfer stats
        / "$SYSTEM_MIRROR/"                                     # Source is root `/`, destination is backup mirror
    
    if [[ $? -eq 0 ]]; then
        log "✅ System mirror completed successfully"
    else
        log "❌ System mirror failed"
        return 1
    fi
}

# === Rsync Home Mirror ===
# Back up home directory with exclusions to avoid junk/cache
rsync_home() {
    log "Starting home mirror rsync..."

    rsync -avH --delete --delete-excluded \
        --exclude='/.cache/*' \                                 # Local user cache
        --exclude='/.local/share/Trash/*' \                     # Deleted files (Trash)
        --exclude='/.mozilla/firefox/*/Cache/*' \               # Firefox cache
        --exclude='/.config/google-chrome/*/Cache/*' \          # Chrome cache
        --exclude='/.steam/steam/steamapps/*' \                 # Steam games (large)
        --exclude='/.local/share/Steam/steamapps/*' \           # Steam games (duplicate path)
        --exclude='/Downloads/Torrents/*' \                     # Large torrent files
        --exclude='/.thumbnails/*' \                            # Thumbnail cache
        --exclude='/.gvfs' \                                    # GNOME virtual filesystem
        --exclude='/.recently-used' \                           # Recently used cache
        --stats \
        "/home/$USERNAME/" "$HOME_MIRROR/"
    
    if [[ $? -eq 0 ]]; then
        log "✅ Home mirror completed successfully"
    else
        log "❌ Home mirror failed"
        return 1
    fi
}

# === Rsync Dotfiles Backup ===
# Fast backup of only critical dotfiles from home
rsync_dotfiles() {
    log "Starting critical dotfiles rsync..."

    # Where critical config files are stored inside home mirror
    local dotfiles_dir="$HOME_MIRROR/.config-critical"
    mkdir -p "$dotfiles_dir"

    # Array of files/folders to backup (edit this based on your tools)
    local critical_files=(
        ".zshrc"
        ".bashrc"
        ".vimrc"
        ".backups"
        ".gitconfig"
        ".ssh/config"
        ".config/hypr/"
        ".config/waybar/"
        ".config/kitty/"
        ".config/rofi/"
        ".config/dunst/"
        ".config/gtk-3.0/"
        ".config/fontconfig/"
    )

    # Iterate and copy each file
    for file in "${critical_files[@]}"; do
        local src="/home/$USERNAME/$file"
        local dest="$dotfiles_dir/$file"

        if [[ -e "$src" ]]; then
            log "Backing up: $file"
            mkdir -p "$(dirname "$dest")"
            rsync -avH "$src" "$dest" 2>/dev/null || log "Warning: Could not backup $file"
        fi
    done

    log "✅ Critical dotfiles backup completed"
}

# === Backup Summary ===
# Creates a human-readable text summary of backup contents
create_summary() {
    local summary_file="$BACKUP_ROOT/rsync-backup-info.txt"

    cat > "$summary_file" << EOF
Rsync Backup Summary
===================
Backup Date: $(date)
Hostname: $(hostname)
User: $USERNAME

Directory Structure:
├── borg-repo/           # Encrypted Borg archives  
├── system-mirror/       # Complete system files (no /home)
├── home-mirror/         # User home directory
└── rsync-backup-info.txt # This summary file

System Mirror Size: $(du -sh "$SYSTEM_MIRROR" 2>/dev/null | cut -f1 || echo "Unknown")
Home Mirror Size: $(du -sh "$HOME_MIRROR" 2>/dev/null | cut -f1 || echo "Unknown")

Last System Backup: $(stat -c %y "$SYSTEM_MIRROR" 2>/dev/null || echo "Never")
Last Home Backup: $(stat -c %y "$HOME_MIRROR" 2>/dev/null || echo "Never")

To browse backups:
- System files: $SYSTEM_MIRROR
- Home files: $HOME_MIRROR
- Dotfiles: $HOME_MIRROR/.config-critical

To restore a file:
rsync /mnt/backup/system-mirror/path/to/file /path/to/file
EOF

    log "Backup summary created: $summary_file"
}

# === Main Function ===
# Entry point that determines what to back up
main() {
    check_backup_mount

    case "${1:-all}" in
        system)
            rsync_system
            ;;
        home)
            rsync_home
            ;;
        dotfiles)
            rsync_dotfiles
            ;;
        all)
            rsync_system
            rsync_home
            rsync_dotfiles
            ;;
        *)
            # Show help message if invalid option given
            echo "Usage: $0 [system|home|dotfiles|all]"
            echo "  system   - Mirror system files (excluding /home)"
            echo "  home     - Mirror user home directory"
            echo "  dotfiles - Quick backup of critical config files"
            echo "  all      - Complete system + home + dotfiles mirror"
            exit 1
            ;;
    esac

    create_summary
    log "Rsync backup operation completed"
}

# Call main with arguments passed to script
main "$@"

